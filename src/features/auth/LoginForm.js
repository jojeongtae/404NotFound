import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';
import apiClient from '../../api/apiClient';
import { useDispatch } from 'react-redux';
import { setToken } from '../../features/auth/tokenSlice';
import { setUser } from '../../features/auth/userSlice';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

const LoginForm = ({ onClose }) => {
    const { login } = useAuth();
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    /** üîπ ÏùºÎ∞ò Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ */
    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const params = new URLSearchParams();
            params.append('username', username);
            params.append('password', password);

            // JWT Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠
            const response = await apiClient.post('/login', params);

            // AccessToken Redux Ï†ÄÏû•
            const accessToken = response.headers.authorization;
            if (accessToken) {
                dispatch(setToken(accessToken));
            }

            // Í∏∞Î≥∏ Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            const basicUserData = {
                username: response.data.username || username,
                role: response.data.role,
            };
            dispatch(setUser(basicUserData));

            // ÏÉÅÏÑ∏ Ïú†Ï†Ä Ï†ïÎ≥¥ ÏöîÏ≤≠
            const userDetailsResponse = await apiClient.get(`/user/user-info?username=${basicUserData.username}`);
            dispatch(setUser({
                ...basicUserData,
                ...userDetailsResponse.data,
            }));

            login();  // Context Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
            onClose();
            navigate('/');
        } catch (error) {
            const errorMessage = error.response?.data?.message || 'Î°úÍ∑∏Ïù∏ Ïã§Ìå®';
            alert(errorMessage);
        }
    };

    /** üîπ ÏÜåÏÖú Î°úÍ∑∏Ïù∏ Î≤ÑÌäº */
    const handleKakaoLogin = () => {
        window.location.href = `${API_BASE_URL}/api/oauth2/authorization/kakao`;
    };

    const handleNaverLogin = () => {
        window.location.href = `${API_BASE_URL}/api/oauth2/authorization/naver`;
    };

    return (
        <>
            <form onSubmit={handleSubmit}>
                <h2>Î°úÍ∑∏Ïù∏</h2>
                <input
                    type="text"
                    placeholder="ÏïÑÏù¥Îîî ÏûÖÎ†•Ïπ∏"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                /><br />
                <input
                    type="password"
                    placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•Ïπ∏"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                /><br />
                <input type="submit" value="Î°úÍ∑∏Ïù∏" />
            </form>

            <div>
                <button type='button' onClick={handleKakaoLogin}>Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏</button>
                <button type='button' onClick={handleNaverLogin}>ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏</button>
            </div>
        </>
    );
};

export default LoginForm;
